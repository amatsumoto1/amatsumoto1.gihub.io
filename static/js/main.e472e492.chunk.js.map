{"version":3,"sources":["components/Header/Navbar.tsx","components/Header/NavItem.tsx","components/Header/index.tsx","hooks/useCanvas.ts","components/Canvas/index.tsx","utils/Random.ts","components/Background/SpiralBackground/index.tsx","components/Background/ParticleBackground/index.tsx","components/Background/index.tsx","pages/Home/index.tsx","components/PageContent/index.tsx","pages/About/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","props","className","children","NavItem","link","text","to","Header","useCanvas","draw","listeners","canvasRef","useRef","canvasCtxRef","onResize","onClick","onMouseMove","useEffect","current","getContext","animationFrameId","ctx","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","handlers","eventName","e","addEventListener","removeEventListener","Canvas","rest","ref","getRandBetween","lower","upper","Math","random","getRandSign","SPIRAL_COLORS","SpiralBackground","spirals","drawSpiral","context","spiral","centerX","centerY","color","iter","multiplier","moveTo","lineWidth","strokeStyle","beginPath","radius","angle","n","PI","x","cos","y","sin","lineTo","stroke","initSpiral","width","height","getRandomColor","maxIter","increasing","floor","length","getDefaultSpiralCount","area","ceil","canvas","offsetWidth","offsetHeight","clearRect","fillStyle","fillRect","spiralCount","defaultSpiralCount","i","push","handleSpiralCount","newSpirals","updateSpirals","rect","getBoundingClientRect","clientX","left","clientY","top","PARTICLE_COLORS","ParticleBackground","particles","createParticle","vx","getRandomVelocity","vy","updateParticle","particle","sign","drawParticle","arc","fill","getNumParticles","canvasWidth","canvasHeight","_","totalParticles","initAllParticles","currentParticles","pop","Background","BackgroundChoices","background","number","chooseBackground","Home","PageContent","About","href","App","basename","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e472e492.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.scss';\n\nconst Navbar: React.FC = (props) => {\n    return (\n        <nav className='header-nav'>\n            <ul>\n                {props.children}\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport { Link } from \"react-router-dom\"\n\ntype NavItemProps = {\n    link: string,\n    text: string,\n}\n\nconst NavItem: React.VFC<NavItemProps> = (props: NavItemProps) => {\n    const { link, text } = props;\n\n    return (\n        <li className=\"header-nav__item\">\n            <Link to={link}>\n                {text}\n            </Link>\n        </li>\n    )\n}\n\nexport default NavItem;","import React from 'react';\nimport Navbar from './Navbar';\nimport NavItem from './NavItem';\nimport './index.scss';\n\nconst Header: React.VFC = () => {\n    return (\n        <header className='page-header'>\n            <Navbar>\n                <NavItem link='/' text='Home' />\n                <NavItem link='/about' text='About' />\n                <NavItem link='/' text='Projects' />\n                <NavItem link='/' text='Contact' />\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header;","import { useRef, useEffect } from 'react';\n\nexport interface EventListeners {\n    onResize?: (context: CanvasRenderingContext2D) => void,\n    onClick?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n    onMouseMove?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n}\n\nconst useCanvas = (draw: (context: CanvasRenderingContext2D, frameCount: number) => void, listeners: EventListeners) => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const canvasCtxRef = useRef<CanvasRenderingContext2D | null>(null);\n    const { onResize, onClick, onMouseMove } = listeners;\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\n            let ctx = canvasCtxRef.current;\n            let frameCount = 0;\n            let animationFrameId: number;\n\n            const render = () => {\n                if (ctx) {\n                    frameCount++;\n                    draw(ctx, frameCount);\n                }\n                animationFrameId = window.requestAnimationFrame(render);\n            };\n\n            render();\n\n            return () => {\n                window.cancelAnimationFrame(animationFrameId);\n            };\n        }\n    }, [draw]);\n\n    useEffect(() => {\n        if (canvasCtxRef.current) {\n            let handlers: any = {};\n\n            let ctx = canvasCtxRef.current;\n\n            if (onResize) {\n                handlers['resize'] = () => {\n                    onResize(ctx);\n                }\n            }\n\n            if (onClick) {\n                handlers['click'] = (e: MouseEvent) => {\n                    onClick(ctx, e);\n                }\n            }\n            \n            if (onMouseMove) {\n                handlers['mousemove'] = (e: MouseEvent) => {\n                    onMouseMove(ctx, e);\n                }\n            }\n\n            for (const eventName in handlers) {\n                window.addEventListener(eventName, handlers[eventName]);\n            }\n        \n            return () => {\n                for (const eventName in handlers) {\n                    window.removeEventListener(eventName, handlers[eventName]);\n                }\n            };\n        }\n    });\n\n    return canvasRef;\n}\n\nexport default useCanvas;","import React from \"react\";\nimport useCanvas from '../../hooks/useCanvas';\n\ntype CanvasProps = {\n    draw: (context: CanvasRenderingContext2D, frameCount: number) => void,\n    onResize?: (context: CanvasRenderingContext2D) => void,\n    onClick?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n    onMouseMove?: (context: CanvasRenderingContext2D, event: MouseEvent) => void\n}\n\nconst Canvas: React.FC<CanvasProps> = (props: CanvasProps) => {\n    const { draw, ...rest } = props;   \n    const canvasRef = useCanvas(draw, rest);\n\n    return <canvas ref={canvasRef} />\n}\n\nexport default Canvas;","export const getRandBetween = (lower: number, upper: number) => {\n    return Math.random() * (upper - lower) + lower;\n}\n\nexport const getRandSign = () => {\n    return Math.random() > 0.5 ? -1 : 1;\n}","import React from \"react\";\nimport Canvas from '../../Canvas';\nimport { getRandBetween, getRandSign } from '../../../utils/Random';\n\nconst BACKGROUND_COLOR = '#2E5175';\nconst SPIRAL_COLORS = [\n    '#8E5E52',\n    '#8E7F52',\n    '#868E52',\n    '#5D8959',\n    '#598984',\n    '#686E8C',\n    '#927D8F'\n];\n\ntype Spiral = {\n    centerX: number,\n    centerY: number,\n    color: string,\n    iter: number,\n    maxIter: number,\n    increasing: boolean,\n    multiplier: number,\n}\n\nconst SpiralBackground: React.VFC = () => {\n    let spirals: Spiral[] = [];\n\n\n    const drawSpiral = (context: CanvasRenderingContext2D, spiral: Spiral) => {\n        const { centerX, centerY, color, iter, multiplier } = spiral;\n\n        context.moveTo(centerX, centerY);\n        context.lineWidth = 10;\n        context.strokeStyle = color;\n        context.beginPath();\n\n        let radius = 0;\n        let angle = 0;\n\n        for (let n = 0; n < iter; n++) {\n            radius += 0.05;\n            angle += (multiplier) * (Math.PI * 2) / 400;\n            const x = centerX + radius * Math.cos(angle);\n            const y = centerY + radius * Math.sin(angle);\n            context.lineTo(x, y);\n        }\n\n        context.stroke();\n    }\n\n    const updateSpirals = () => {\n        const newSpirals = [];\n        for (const spiral of spirals) {\n            if (spiral.iter) {\n                newSpirals.push(spiral);\n            }\n            spiral.increasing = spiral.increasing && spiral.iter < spiral.maxIter;\n            if (spiral.increasing) {\n                spiral.iter++;\n            }\n            else {\n                spiral.iter--;\n            }\n        }\n\n        spirals = newSpirals;\n    }\n\n    const initSpiral = (width: number, height: number) => {\n        return {\n            centerX: getRandBetween(10, width - 10),\n            centerY: getRandBetween(10, height - 10), \n            color: getRandomColor(),\n            iter: 1,\n            maxIter: getRandBetween(1000, 4000),\n            increasing: true,\n            multiplier: getRandSign()\n        };\n    }\n\n    const handleSpiralCount = (width: number, height: number) => {\n        const spiralCount = spirals.length;\n        const defaultSpiralCount = getDefaultSpiralCount(width, height);\n        for (let i = spiralCount; i < defaultSpiralCount; i++) {\n            spirals.push(initSpiral(width, height));\n        }\n    }\n    \n    const drawCanvas = (context: CanvasRenderingContext2D, frameCount: number) => {\n        const canvas = context.canvas;\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.fillStyle = BACKGROUND_COLOR;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        handleSpiralCount(canvas.width, canvas.height);\n\n        updateSpirals();\n        for (const spiral of spirals) {\n            drawSpiral(context, spiral);\n        }\n    }\n\n    const handleClick = (context: CanvasRenderingContext2D, e: MouseEvent) => {\n        const rect = context.canvas.getBoundingClientRect();\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        spirals.push({ \n            centerX: x,\n            centerY: y,\n            color: getRandomColor(),\n            iter: 1, \n            maxIter: getRandBetween(1000, 4000),\n            increasing: true,\n            multiplier: getRandSign()\n            }\n        );\n    }\n\n    const getRandomColor = (): string => {\n        return SPIRAL_COLORS[Math.floor(Math.random() * SPIRAL_COLORS.length)];\n    }\n\n    const getDefaultSpiralCount = (width: number, height: number) => {\n        const area = width * height;\n\n        return Math.ceil(area / 400000 + 1);\n    }\n\n    return (\n        <Canvas draw={drawCanvas} onClick={handleClick}/>\n    );\n}\n\nexport default SpiralBackground;","import React from 'react';\nimport Canvas from '../../Canvas';\nimport { getRandBetween, getRandSign } from '../../../utils/Random';\n\nconst BACKGROUND_COLOR = '#2E5175';\nconst PARTICLE_COLORS = [\n    '#D788CB',\n    '#EEC3C3',\n    '#A7D3DA',\n    '#F0F5B6',\n    '#BBFAB2',\n    '#F7C78E'\n];\n\ntype Particle  = {\n    color: string,\n    x: number,\n    y: number,\n    vx: number,\n    vy: number\n}\n\nconst ParticleBackground: React.VFC = () => {\n    const particles: Particle[] = [];\n\n    const createParticle =  (width: number, height: number): Particle => {\n        return {\n            color: getRandomColor(),\n            x: getRandBetween(0, width),\n            y: getRandBetween(0, height),\n            vx: getRandSign() * getRandomVelocity(),\n            vy: getRandSign() * getRandomVelocity()\n        } as Particle;\n    }\n\n    const initAllParticles = (width: number, height: number) => {\n        const totalParticles = getNumParticles(width, height);\n        for (let i = 0; i < totalParticles; i++) {\n            particles.push(createParticle(width, height));\n        }\n    }\n\n    const updateParticle = (particle: Particle, width: number, height: number) => {\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        if (particle.x >= width || particle.x <= 0) {\n            particle.vx = -Math.sign(particle.vx) * getRandomVelocity();\n        }\n\n        if (particle.y >= height || particle.y <= 0) {\n            particle.vy = - Math.sign(particle.vy) * getRandomVelocity();\n        }\n    }\n\n    const drawParticle = (context: CanvasRenderingContext2D, particle: Particle) => {\n        const { color, x, y } = particle;\n        context.beginPath();\n        context.arc(x, y, 5, 0, 2 * Math.PI);\n        context.fillStyle = color;\n        context.fill();\n        context.strokeStyle = color;\n        context.stroke();\n\n    }\n\n    const drawCanvas = (context: CanvasRenderingContext2D, _: number) => {\n        const canvas = context.canvas;\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        \n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.fillStyle = BACKGROUND_COLOR;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n    \n        if (!particles.length) {\n            initAllParticles(canvas.width, canvas.height);\n        }\n\n        for (const particle of particles) {\n            updateParticle(particle, canvas.width, canvas.height);\n            drawParticle(context, particle);\n        }\n    }\n\n    const handleResize = (context: CanvasRenderingContext2D) => {\n        const { width, height } = context.canvas;\n        const totalParticles = getNumParticles(width, height);\n        const currentParticles = particles.length;\n        if (currentParticles > totalParticles) {\n            for (let i = currentParticles; i > totalParticles; i--) {\n                particles.pop();\n            }\n        }\n        else {\n            for (let i = currentParticles; i < totalParticles; i++) {\n                particles.push(createParticle(width, height));\n            }\n        }\n    }\n\n    const getRandomVelocity = (): number => {\n        return getRandBetween(0.5, 1.5);\n    }\n\n    const getRandomColor = (): string => {\n        return PARTICLE_COLORS[Math.floor(Math.random() * PARTICLE_COLORS.length)];\n    }\n\n    const getNumParticles = (canvasWidth: number, canvasHeight: number) => {\n        const area = canvasWidth * canvasHeight;\n\n        return Math.ceil(area / 8000);\n    }\n\n    return (\n        <Canvas draw={drawCanvas} onResize={handleResize}/>\n    );\n}\n\nexport default ParticleBackground;","import React from 'react';\nimport SpiralBackground from './SpiralBackground';\nimport ParticleBackground from './ParticleBackground';\nimport './index.scss';\n\n\nconst Background: React.VFC = () => {\n    const BackgroundChoices = [\n        < SpiralBackground />,\n        < ParticleBackground />\n    ]\n\n    const chooseBackground = () : React.ReactNode => {\n        const number = Math.floor(Math.random() * 2);\n        return BackgroundChoices[number];\n    }\n\n    const background = chooseBackground();\n\n    return (\n        <div className='background'>\n            { background }\n        </div>\n    )\n}\n\nexport default Background;","import React from 'react';\nimport './index.scss';\n\nconst Home: React.VFC = () => {\n    return (\n        <div className='home-page'>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport './index.scss';\n\nconst PageContent: React.FC = (props) => {\n    return (\n        <div className='page-content'>\n            { props.children }\n        </div>\n    )\n}\n\nexport default PageContent;","import React from 'react';\nimport PageContent from '../../components/PageContent';\nimport './index.scss';\n\nconst About : React.VFC = () => {\n    return (\n        <div className='about-page'>\n            <PageContent>\n                <h1 className = 'about-page__header'>About Me</h1>\n                <p>I am a Full-Stack Software Engineer at <a href=\"https://www.rlicorp.com/\">RLI Insurance</a>, building websites \n                    for our customers and underwriters. I graduated  in 2018 from Cornell University with a Masters of Engineering\n                    in Computer Science. I also graduated from Cornell University in 2017 with a Bachelors of Science in Computer Science.\n                    I enjoy learning new things and being constantly challenged.\n                </p>\n            </PageContent>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport Header from './components/Header';\nimport Background from './components/Background';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport { Route, Routes, HashRouter as Router } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router basename='/'>\n      <Background />\n      <Header />\n      <Routes>\n        <Route path='/' element={<Home />} />\n        <Route path='/about' element = {<About />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}