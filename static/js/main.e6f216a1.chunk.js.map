{"version":3,"sources":["components/Background/CheckeredBackground/index.tsx","components/Header/Navbar.tsx","components/Header/NavItem.tsx","components/Header/index.tsx","hooks/useCanvas.ts","components/Canvas/index.tsx","utils/Random.ts","components/Background/SpiralBackground/index.tsx","components/Background/ParticleBackground/index.tsx","utils/Math.ts","components/Background/ElectricBackground/index.tsx","components/Background/BackgroundSelector/index.tsx","components/Background/index.tsx","components/Footer/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Direction","Navbar","props","className","children","NavItem","link","text","to","onClick","e","stopPropagation","Header","useCanvas","draw","listeners","canvasRef","useRef","canvasCtxRef","onResize","onMouseMove","useEffect","current","getContext","animationFrameId","ctx","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","handlers","eventName","addEventListener","removeEventListener","Canvas","rest","ref","getRandBetween","lower","upper","Math","random","getRandIntBetween","floor","getRandSign","SpiralBackground","spirals","drawSpiral","context","spiral","centerX","centerY","iter","multiplier","finalColorAngle","colorAngle","moveTo","lineWidth","strokeStyle","shadowBlur","shadowColor","beginPath","radius","angle","n","PI","x","cos","y","sin","lineTo","stroke","initSpiral","width","height","maxIter","increasing","getDefaultSpiralCount","area","ceil","canvas","offsetWidth","offsetHeight","clearRect","fillStyle","fillRect","spiralCount","length","defaultSpiralCount","i","push","handleSpiralCount","newSpirals","updateSpirals","rect","getBoundingClientRect","clientX","left","clientY","top","PARTICLE_COLORS","ParticleBackground","particles","createParticle","color","getRandomColor","vx","getRandomVelocity","vy","updateParticle","particle","sign","drawParticle","arc","fill","getNumParticles","canvasWidth","canvasHeight","_","globalCompositeOperation","totalParticles","initAllParticles","currentParticles","pop","Vec2","this","magnitude","sqrt","pow","ElectricBackground","lightningBolts","lastManualBoltTime","Date","now","createLightning","startX","startY","segmentHeight","bolt","segments","thickness","opacity","initSegments","start","minWidth","maxWidth","offset","boltLength","segment","points","endY","endX","min","max","nextStart","updateBolt","forEach","drawBolt","closePath","drawSegment","filter","currentTime","BackgroundSelector","backgrounds","active","onBackgroundSelect","useState","visible","setVisible","stopDefaultClick","preventDefault","toggleVisible","icon","faArrowDown","faArrowUp","onChange","target","value","onBlur","map","background","CheckeredBackground","squareLength","direction","TOP","center","colorOffset","colNumber","updateTop","toggleColorOffset","RIGHT","updateColorAngle","updateRight","BOTTOM","updateBottom","LEFT","updateLeft","getLightColor","getDarkColor","getSquareEdgeWidth","drawSquare","update","BackgroundChoices","electric","checkered","Background","backgroundNames","Object","keys","chooseRandomBackground","setBackground","newBackground","Footer","Home","lazy","About","Projects","App","basename","fallback","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6f216a1.chunk.js","sourcesContent":["import React from 'react';\nimport Canvas from '../../Canvas';\nimport { Vec2 } from '../../../utils/Math';\nimport { getRandIntBetween } from '../../../utils/Random';\n\nconst BACKGROUND_COLOR = '#000000';\n\nenum Direction {\n  TOP,\n  TOP_RIGHT,\n  RIGHT,\n  BOTTOM_RIGHT,\n  BOTTOM,\n  BOTTOM_LEFT,\n  LEFT,\n  TOP_LEFT\n}\n\nconst CheckeredBackground: React.VFC = () => {\n  let direction: Direction = Direction.TOP;\n\n  let center: Vec2 = new Vec2(0, 0);\n  let squareLength: number;\n  let colorAngle = getRandIntBetween(0, 45);\n  let colorOffset = 0;\n  let colNumber = 0;\n\n  const getSquareEdgeWidth = ({width, height}: HTMLCanvasElement): number => {\n    const minSide = Math.min(width, height);\n    return minSide / 20;\n  }\n\n  const drawSquare = (context: CanvasRenderingContext2D) => {\n    context.fillStyle = (colNumber % 2 === colorOffset) ? getLightColor() : getDarkColor();\n    context.fillRect(center.x, center.y, squareLength, squareLength);\n  }\n\n  const update = (canvas: HTMLCanvasElement) => {\n    switch(direction) {\n      case Direction.TOP:\n        updateTop(canvas);\n        break;\n      case Direction.RIGHT:\n        updateRight(canvas);\n        break;\n      case Direction.BOTTOM:\n        updateBottom(canvas);\n        break;\n      case Direction.LEFT:\n        updateLeft(canvas);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const updateTop = ({width, height}: HTMLCanvasElement) => {\n    center.x += squareLength;\n    colNumber++;\n    if (center.x > width) {\n      center.x = 0;\n      center.y += squareLength;\n      toggleColorOffset();\n      if (center.y > height) {\n        direction = Direction.RIGHT;\n        center = new Vec2(width - squareLength, 0);\n        updateColorAngle();\n      }\n    }\n  }\n\n  const updateRight = ({width, height}: HTMLCanvasElement) => {\n    center.y += squareLength;\n    colNumber++;\n    if (center.y > height) {\n      center.y = 0;\n      center.x -= squareLength;\n      toggleColorOffset();\n      if (center.x <= -squareLength) {\n        direction = Direction.BOTTOM;\n        center = new Vec2(width - squareLength, height - squareLength);\n        updateColorAngle();\n      }\n    }\n  }\n\n  const updateBottom = ({width, height}: HTMLCanvasElement) => {\n    center.x -= squareLength;\n    colNumber++;\n    if (center.x <= -squareLength) {\n      center.x = width - squareLength;\n      center.y -= squareLength;\n      toggleColorOffset();\n      if (center.y <= -squareLength) {\n        direction = Direction.LEFT;\n        center = new Vec2(0, height - squareLength);\n        updateColorAngle();\n      }\n    }\n  }\n\n  const updateLeft = ({width, height}: HTMLCanvasElement) => {\n    center.y -= squareLength;\n    colNumber++;\n    if (center.y <= -squareLength) {\n      center.y = height - squareLength;\n      toggleColorOffset();\n      center.x += squareLength;\n      if (center.x >= width) {\n        direction = Direction.TOP;\n        center = new Vec2(0, 0);\n        updateColorAngle();\n      }\n    }\n  }\n\n\n  const drawCanvas = (context: CanvasRenderingContext2D, frameCount: number) => {\n    const canvas = context.canvas;\n\n    if (frameCount <= 1) {\n      canvas.width  = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.fillStyle = BACKGROUND_COLOR;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      squareLength = getSquareEdgeWidth(canvas);\n    }\n        \n    drawSquare(context);\n    if (frameCount % 2 === 1) {\n      update(canvas);\n    } \n  }\n\n  const getLightColor = () => {\n    return `hsl(${colorAngle}, 50%, 10%)`;\n  }\n\n  const getDarkColor = () => {\n    return `hsl(${(colorAngle+180)%360}, 25%, 10%)`;\n  }\n\n  const updateColorAngle = () => {\n    colorAngle = (colorAngle + getRandIntBetween(45, 90)) % 360;\n  }\n\n  const toggleColorOffset = () => {\n    colNumber = 0;\n    colorOffset = colorOffset === 0 ? 1 : 0;\n  }\n\n  return (\n    <Canvas draw={drawCanvas} />\n  );\n}\n\nexport default CheckeredBackground;","import React from 'react';\nimport './Navbar.scss';\n\nconst Navbar: React.FC = (props) => {\n  return (\n    <nav className='header-nav'>\n      <ul>\n        {props.children}\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport { Link } from \"react-router-dom\"\n\ntype NavItemProps = {\n  link: string,\n  text: string,\n}\n\nconst NavItem: React.VFC<NavItemProps> = (props: NavItemProps) => {\n  const { link, text } = props;\n\n  const onLinkClicked = (e: React.MouseEvent) => {\n    // Prevent the background canvas from reacting to clicking on link.\n    e.stopPropagation();\n  }\n\n  return (\n    <li className=\"header-nav__item\">\n      <Link to={link} onClick={onLinkClicked}>\n        {text}\n      </Link>\n    </li>\n  );\n}\n\nexport default NavItem;","import React from 'react';\nimport Navbar from './Navbar';\nimport NavItem from './NavItem';\nimport './index.scss';\n\nconst Header: React.VFC = () => {\n  return (\n    <header className='page-header'>\n      <Navbar>\n        <NavItem link='/' text='Home' />\n        <NavItem link='/about' text='About' />\n        <NavItem link='/projects' text='Projects' />\n        <NavItem link='/' text='Contact' />\n      </Navbar>\n    </header>\n  );\n}\n\nexport default Header;","import { useRef, useEffect } from 'react';\n\nexport interface EventListeners {\n  onResize?: (context: CanvasRenderingContext2D) => void,\n  onClick?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n  onMouseMove?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n}\n\nconst useCanvas = (draw: (context: CanvasRenderingContext2D, frameCount: number) => void, listeners: EventListeners) => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const canvasCtxRef = useRef<CanvasRenderingContext2D | null>(null);\n  const { onResize, onClick, onMouseMove } = listeners;\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      canvasCtxRef.current = canvasRef.current.getContext('2d');\n      const ctx = canvasCtxRef.current;\n      let frameCount = 0;\n      let animationFrameId: number;\n\n      const render = () => {\n        if (ctx) {\n          frameCount++;\n          draw(ctx, frameCount);\n        }\n        \n        animationFrameId = window.requestAnimationFrame(render);\n      };\n\n      render();\n\n      return () => {\n        window.cancelAnimationFrame(animationFrameId);\n      };\n    }\n  }, [draw]);\n\n  useEffect(() => {\n    if (canvasCtxRef.current) {\n      let handlers: any = {};\n\n      let ctx = canvasCtxRef.current;\n\n      if (onResize) {\n        handlers['resize'] = () => {\n          onResize(ctx);\n        }\n      }\n\n      if (onClick) {\n        handlers['click'] = (e: MouseEvent) => {\n          onClick(ctx, e);\n        }\n      }\n            \n      if (onMouseMove) {\n        handlers['mousemove'] = (e: MouseEvent) => {\n          onMouseMove(ctx, e);\n        }\n      }\n\n      for (const eventName in handlers) {\n        window.addEventListener(eventName, handlers[eventName]);\n      }\n        \n      return () => {\n        for (const eventName in handlers) {\n          window.removeEventListener(eventName, handlers[eventName]);\n        }\n      };\n    }\n  });\n\n  return canvasRef;\n}\n\nexport default useCanvas;","import React from \"react\";\nimport useCanvas from '../../hooks/useCanvas';\n\ntype CanvasProps = {\n  draw: (context: CanvasRenderingContext2D, frameCount: number) => void,\n  onResize?: (context: CanvasRenderingContext2D) => void,\n  onClick?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n  onMouseMove?: (context: CanvasRenderingContext2D, event: MouseEvent) => void\n}\n\nconst Canvas: React.FC<CanvasProps> = (props: CanvasProps) => {\n  const { draw, ...rest } = props;   \n  const canvasRef = useCanvas(draw, rest);\n\n  return <canvas ref={canvasRef} />\n}\n\nexport default Canvas;","export const getRandBetween = (lower: number, upper: number) => {\n  return Math.random() * (upper - lower) + lower;\n}\n\nexport const getRandIntBetween = (lower: number, upper: number) => {\n  return Math.floor(Math.random() * (upper - lower) + lower);\n}\n\nexport const getRandSign = () => {\n  return Math.random() > 0.5 ? -1 : 1;\n}","import React from \"react\";\nimport Canvas from '../../Canvas';\nimport { getRandBetween, getRandSign } from '../../../utils/Random';\n\nconst BACKGROUND_COLOR = '#000000';\n\ntype Spiral = {\n  centerX: number,\n  centerY: number,\n  colorAngle: number,\n  iter: number,\n  maxIter: number,\n  increasing: boolean,\n  multiplier: number,\n}\n\nconst SpiralBackground: React.VFC = () => {\n  let spirals: Spiral[] = [];\n\n  const drawSpiral = (context: CanvasRenderingContext2D, spiral: Spiral) => {\n    const { centerX, centerY, iter, multiplier, colorAngle } = spiral;\n    const finalColorAngle = (colorAngle + multiplier * getRandBetween(0.5,2)) % 360;\n    spiral.colorAngle = finalColorAngle;\n\n    context.moveTo(centerX, centerY);\n    context.lineWidth = 10;\n    context.strokeStyle = `hsl(${finalColorAngle}, 30%, 15%)`;\n    context.shadowBlur = 10;\n    context.shadowColor= `hsl(${(finalColorAngle + getRandBetween(-2,2)) % 360}, 20%, 5%)`;\n    context.beginPath();\n\n    let radius = 0;\n    let angle = 0;\n\n    for (let n = 0; n < iter; n++) {\n      radius += 0.05;\n      angle += (multiplier) * (Math.PI * 2) / 400;\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      context.lineTo(x, y);\n    }\n\n    context.stroke();\n  }\n\n  const updateSpirals = () => {\n    const newSpirals = [];\n    for (const spiral of spirals) {\n      if (spiral.iter) {\n        newSpirals.push(spiral);\n      }\n      spiral.increasing = spiral.increasing && spiral.iter < spiral.maxIter;\n      if (spiral.increasing) {\n        spiral.iter++;\n      }\n      else {\n        spiral.iter--;\n      }\n    }\n\n    spirals = newSpirals;\n  }\n\n  const initSpiral = (width: number, height: number) => {\n    return {\n      centerX: getRandBetween(10, width - 10),\n      centerY: getRandBetween(10, height - 10), \n      colorAngle: getRandBetween(0, 360),\n      iter: 1,\n      maxIter: getRandBetween(1000, 4000),\n      increasing: true,\n      multiplier: getRandSign()\n    };\n  }\n\n  const handleSpiralCount = (width: number, height: number) => {\n    const spiralCount = spirals.length;\n    const defaultSpiralCount = getDefaultSpiralCount(width, height);\n    for (let i = spiralCount; i < defaultSpiralCount; i++) {\n      spirals.push(initSpiral(width, height));\n    }\n  }\n    \n  const drawCanvas = (context: CanvasRenderingContext2D, frameCount: number) => {\n    const canvas = context.canvas;\n        \n    canvas.width  = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = BACKGROUND_COLOR;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    handleSpiralCount(canvas.width, canvas.height);\n\n    updateSpirals();\n      for (const spiral of spirals) {\n        drawSpiral(context, spiral);\n    }\n  }\n\n  const handleClick = (context: CanvasRenderingContext2D, e: MouseEvent) => {\n    const rect = context.canvas.getBoundingClientRect();\n\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    spirals.push({ \n      centerX: x,\n      centerY: y,\n      colorAngle: getRandBetween(0, 360),\n      iter: 1, \n      maxIter: getRandBetween(1000, 4000),\n      increasing: true,\n      multiplier: getRandSign()\n    });\n  }\n\n  const getDefaultSpiralCount = (width: number, height: number) => {\n    const area = width * height;\n\n    return Math.ceil(area / 200000 + 1);\n  }\n\n  return (\n    <Canvas draw={drawCanvas} onClick={handleClick}/>\n  );\n}\n\nexport default SpiralBackground;","import React from 'react';\nimport Canvas from '../../Canvas';\nimport { getRandBetween, getRandSign } from '../../../utils/Random';\n\nconst BACKGROUND_COLOR = '#000000';\nconst PARTICLE_COLORS = [\n  '#8E5E52',\n  '#8E7F52',\n  '#868E52',\n  '#5D8959',\n  '#598984',\n  '#686E8C',\n  '#927D8F'\n];\n\ntype Particle  = {\n  color: string,\n  x: number,\n  y: number,\n  vx: number,\n  vy: number\n}\n\nconst ParticleBackground: React.VFC = () => {\n  const particles: Particle[] = [];\n\n  const createParticle =  (width: number, height: number): Particle => {\n    return {\n      color: getRandomColor(),\n      x: getRandBetween(0, width),\n      y: getRandBetween(0, height),\n      vx: getRandSign() * getRandomVelocity(),\n      vy: getRandSign() * getRandomVelocity()\n    } as Particle;\n  }\n\n  const initAllParticles = (width: number, height: number) => {\n    const totalParticles = getNumParticles(width, height);\n    for (let i = 0; i < totalParticles; i++) {\n      particles.push(createParticle(width, height));\n    }\n  }\n\n  const updateParticle = (particle: Particle, width: number, height: number) => {\n    particle.x += particle.vx;\n    particle.y += particle.vy;\n\n    if (particle.x >= width || particle.x <= 0) {\n      particle.vx = -Math.sign(particle.vx) * getRandomVelocity();\n    }\n\n    if (particle.y >= height || particle.y <= 0) {\n      particle.vy = - Math.sign(particle.vy) * getRandomVelocity();\n    }\n  }\n\n  const drawParticle = (context: CanvasRenderingContext2D, particle: Particle) => {\n    const { color, x, y } = particle;\n    context.beginPath();\n    context.shadowBlur = 10;\n    context.shadowColor = color;\n    context.arc(x, y, 5, 0, 2 * Math.PI);\n    context.fillStyle = color;\n    context.fill();\n    context.strokeStyle = color;\n    context.stroke();\n  }\n\n  const drawCanvas = (context: CanvasRenderingContext2D, _: number) => {\n    const canvas = context.canvas;\n        \n    canvas.width  = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n\n        \n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = BACKGROUND_COLOR;\n    context.globalCompositeOperation = 'screen';\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    \n    if (!particles.length) {\n      initAllParticles(canvas.width, canvas.height);\n    }\n\n    for (const particle of particles) {\n      updateParticle(particle, canvas.width, canvas.height);\n      drawParticle(context, particle);\n    }\n  }\n\n  const handleResize = (context: CanvasRenderingContext2D) => {\n    const { width, height } = context.canvas;\n    const totalParticles = getNumParticles(width, height);\n    const currentParticles = particles.length;\n    if (currentParticles > totalParticles) {\n      for (let i = currentParticles; i > totalParticles; i--) {\n        particles.pop();\n      }\n    }\n    else {\n      for (let i = currentParticles; i < totalParticles; i++) {\n        particles.push(createParticle(width, height));\n      }\n    }\n  }\n\n  const getRandomVelocity = (): number => {\n    return getRandBetween(0.5, 1.5);\n  }\n\n  const getRandomColor = (): string => {\n    return PARTICLE_COLORS[Math.floor(Math.random() * PARTICLE_COLORS.length)];\n  }\n\n  const getNumParticles = (canvasWidth: number, canvasHeight: number) => {\n    const area = canvasWidth * canvasHeight;\n\n    return Math.ceil(area / 2000);\n  }\n\n  return (\n    <Canvas draw={drawCanvas} onResize={handleResize}/>\n  );\n}\n\nexport default ParticleBackground;","export class Vec2 {\n  public x: number;\n  public y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add({x, y}: Vec2) {\n    this.x += x;\n    this.y += y;\n  }\n\n  getDisplacement({x, y}: Vec2): Vec2 {\n    return new Vec2(x - this.x, y - this.y);\n  }\n\n  normalize() {\n    const magnitude = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    if (magnitude) {\n      this.x /= magnitude;\n      this.y /= magnitude;\n    }\n  }\n}","import React from 'react';\nimport Canvas from '../../Canvas';\nimport { Vec2 } from '../../../utils/Math';\nimport { getRandBetween } from '../../../utils/Random';\n\ntype LightningSegment = {\n  points: Vec2[];\n}\n\ntype LightningBolt = {\n  segments: LightningSegment[],\n  thickness: number,\n  opacity: number,\n}\n\nconst BACKGROUND_COLOR = '#000000';\nconst NUM_SEGMENTS = 100;\n\nconst ElectricBackground: React.VFC = () => {\n  let lightningBolts: LightningBolt[] = [];\n  let lastManualBoltTime = Date.now();\n\n  const createLightning = (canvas: HTMLCanvasElement, startX?: number, startY?: number): LightningBolt => {\n    const { width, height } = canvas;\n    const segmentHeight = height/NUM_SEGMENTS;\n    const bolt: LightningBolt = {\n      segments: [],\n      thickness: 5,\n      opacity: 1\n    };\n\n    startX = startX || getRandBetween(2, width - 2);\n    startY = startY || 0;\n    initSegments(bolt, new Vec2(startX, startY), 2, width - 2, getRandBetween(-2, 2), segmentHeight, height);\n\n    return bolt;\n  }\n\n  const initSegments = (bolt: LightningBolt, start: Vec2, minWidth: number, maxWidth: number, offset: number, boltLength: number, height: number) => {\n    const segment: LightningSegment = {points: [start]};\n    \n    let startX = start.x;\n    let startY = start.y;\n    \n    while (startY < height) {\n      if (segment.points.length && Math.random() < 0.01) {\n        break;\n      }\n    \n      const endY = startY + boltLength;\n      const endX = Math.min(Math.max(startX + getRandBetween(-10 + offset, 10 + offset), minWidth), maxWidth);\n      segment.points.push(new Vec2(endX, endY));\n      startX = endX;\n      startY = endY;\n    }\n\n    bolt.segments.push(segment);\n    if (startY < height) {\n      const nextStart = new Vec2(startX, startY);\n      initSegments(bolt, nextStart, minWidth, startX + 2, -2, Math.max(boltLength - 1, 3), height);\n      initSegments(bolt, nextStart, startX - 2, maxWidth, 2, Math.max(boltLength - 1, 3), height);\n    }\n  }\n    \n  const updateBolt = (bolt: LightningBolt) => {\n    bolt.opacity -= 0.01;\n    bolt.thickness -= 0.05;\n    if (bolt.thickness <= 2) {\n      bolt.segments.forEach(segment => segment.points[segment.points.length - 1].y -= 0.05);\n    }\n  }\n\n  const updateAllBolts = () => {\n    lightningBolts.forEach(updateBolt);\n    lightningBolts = lightningBolts.filter(bolt => bolt.opacity > 0 && bolt.thickness > 0);\n  }\n\n  const drawSegment = (context: CanvasRenderingContext2D, segment: LightningSegment, thickness: number, opacity: number) => {\n    const { points } = segment;\n    const [ start, ...rest ] = points;\n    context.beginPath();\n\n    context.moveTo(start.x, start.y);\n    context.lineWidth = thickness;\n    context.strokeStyle = `rgba(255, 255, 255, ${opacity})`;\n    context.shadowBlur = 30;\n    context.shadowColor = \"#bd9df2\";\n    for (const {x, y} of rest) {\n      context.lineTo(x, y);\n    }\n\n    context.stroke();\n    context.closePath();\n  }\n\n  const drawBolt = (context: CanvasRenderingContext2D, bolt: LightningBolt) => {\n    const { segments, thickness, opacity } = bolt;\n    segments.forEach(segment => drawSegment(context, segment, thickness, opacity));\n  }\n\n  const drawCanvas = (context: CanvasRenderingContext2D, frameCount: number) => {\n    const canvas = context.canvas;\n        \n    canvas.width  = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n\n        \n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = BACKGROUND_COLOR;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    if (frameCount % 200 === 0) {\n      lightningBolts.push(createLightning(canvas));\n    }\n    \n    updateAllBolts();\n    lightningBolts.forEach(bolt => drawBolt(context, bolt));\n  }\n\n  const handleClick = (context: CanvasRenderingContext2D, e: MouseEvent) => {\n    const rect = context.canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    lastManualBoltTime = Date.now();\n    lightningBolts.push(createLightning(context.canvas, x, y));\n  }\n\n  const handleMouseMove = (context: CanvasRenderingContext2D, e: MouseEvent) => {\n    const currentTime = Date.now();\n    if (currentTime - lastManualBoltTime > 500) {\n      const rect = context.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      lastManualBoltTime = currentTime;\n      lightningBolts.push(createLightning(context.canvas, x, y));\n    }\n  }\n\n  return (\n    <Canvas draw={drawCanvas} onClick={handleClick} onMouseMove={handleMouseMove} />\n  );\n}\n\nexport default ElectricBackground;","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport './index.scss';\n\ntype BackgroundSelectorProps = {\n  backgrounds: string[],\n  active: string,\n  onBackgroundSelect: (background: string) => void,\n}\n\nconst BackgroundSelector: React.VFC<BackgroundSelectorProps> = (props: BackgroundSelectorProps) => {\n  const { backgrounds, active, onBackgroundSelect } = props;\n  const [ visible, setVisible ] = useState(false);\n\n  const onVisibleClicked = (e: React.MouseEvent<HTMLButtonElement>) => {\n    stopDefaultClick(e);\n    toggleVisible();\n  }\n\n  const stopDefaultClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    onBackgroundSelect(e.target.value);\n  }\n\n  const toggleVisible = () => {\n    setVisible(!visible);\n  }\n\n  return (\n    <div className='background-selector'>\n      <button\n        className='background-selector__visible-button'\n        onClick={onVisibleClicked}\n        aria-label={`${visible ? 'Hide' : 'Show'} Background Selector`}\n      >\n        <span>Background: </span><FontAwesomeIcon icon={visible ?  faArrowDown : faArrowUp }/>\n      </button>\n      { visible &&\n        <div className='background-selector__options-container'>\n          <select className='background-selector__options' onChange={onChange} value={active} onClick={stopDefaultClick} onBlur={toggleVisible}>\n            { backgrounds.map((background) =>\n              <option key={background} className={active ? 'background-active-option' : '' }value={background} onClick={stopDefaultClick}>\n                {background}\n              </option>\n            )};\n          </select>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default BackgroundSelector;","import React, { useState } from 'react';\nimport SpiralBackground from './SpiralBackground';\nimport ParticleBackground from './ParticleBackground';\nimport ElectricBackground from './ElectricBackground';\nimport BackgroundSelector from './BackgroundSelector';\nimport CheckeredBackground from './CheckeredBackground';\nimport './index.scss';\n\n\nconst BackgroundChoices: {[key: string]: React.ReactNode}  = {\n  spiral: < SpiralBackground />,\n  particle: < ParticleBackground />,\n  electric: < ElectricBackground />,\n  checkered: <CheckeredBackground />\n};\n\nconst Background: React.VFC = () => {\n  const chooseRandomBackground = () : string => {\n    const backgroundNames = Object.keys(BackgroundChoices);\n    const index = Math.floor(Math.random() * backgroundNames.length);\n    return backgroundNames[index];\n  }\n\n  const [background, setBackground] = useState(chooseRandomBackground());\n\n  const onBackgroundSelected = (newBackground: string) => {\n    setBackground(newBackground);\n  }\n\n  return (\n    <>\n      <div className='background'>\n        { BackgroundChoices[background] }\n      </div>\n      <BackgroundSelector\n        backgrounds={Object.keys(BackgroundChoices)}\n        onBackgroundSelect={onBackgroundSelected}\n        active={background} />\n    </>\n  );\n}\n\nexport default Background;","import React from 'react';\nimport './index.scss';\n\nconst Footer: React.VFC = () => {\n  return (\n    <footer className='page-footer'>\n\n    </footer>\n  );\n}\n\nexport default Footer;","import React, { Suspense, lazy } from 'react';\nimport Header from './components/Header';\nimport Background from './components/Background';\nimport Footer from './components/Footer';\nimport { Route, Routes, HashRouter as Router } from 'react-router-dom';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst About = lazy(() => import('./pages/About'));\nconst Projects = lazy(() => import('./pages/Projects'));\n\nconst App: React.VFC = () => {\n  return (\n    <Router basename='/'>\n      <Background />\n      <Header />\n      <Suspense fallback={null}>\n        <Routes>\n          <Route path='/' element={<Home />} />\n          <Route path='/about' element = {<About />} />\n          <Route path='/projects' element={<Projects />} />\n        </Routes>\n      </Suspense>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}