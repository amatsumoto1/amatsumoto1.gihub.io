{"version":3,"sources":["components/Header/Navbar.tsx","components/Header/NavItem.tsx","components/Header/index.tsx","hooks/useCanvas.ts","components/Canvas/index.tsx","utils/Random.ts","components/Background/SpiralBackground/index.tsx","components/Background/ParticleBackground/index.tsx","utils/Math.ts","components/Background/ElectricBackground/index.tsx","components/Background/BackgroundSelector/index.tsx","components/Background/index.tsx","components/Footer/index.tsx","components/PageContent/index.tsx","pages/Home/index.tsx","pages/About/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","props","className","children","NavItem","link","text","to","onClick","e","stopPropagation","Header","useCanvas","draw","listeners","canvasRef","useRef","canvasCtxRef","onResize","onMouseMove","useEffect","current","getContext","animationFrameId","ctx","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","handlers","eventName","addEventListener","removeEventListener","Canvas","rest","ref","getRandBetween","lower","upper","Math","random","getRandSign","SpiralBackground","spirals","drawSpiral","context","spiral","centerX","centerY","iter","multiplier","finalColorAngle","colorAngle","moveTo","lineWidth","strokeStyle","shadowBlur","shadowColor","beginPath","radius","angle","n","PI","x","cos","y","sin","lineTo","stroke","initSpiral","width","height","maxIter","increasing","getDefaultSpiralCount","area","ceil","canvas","offsetWidth","offsetHeight","clearRect","fillStyle","fillRect","spiralCount","length","defaultSpiralCount","i","push","handleSpiralCount","newSpirals","updateSpirals","rect","getBoundingClientRect","clientX","left","clientY","top","PARTICLE_COLORS","ParticleBackground","particles","createParticle","color","getRandomColor","vx","getRandomVelocity","vy","updateParticle","particle","sign","drawParticle","arc","fill","floor","getNumParticles","canvasWidth","canvasHeight","_","globalCompositeOperation","totalParticles","initAllParticles","currentParticles","pop","Vec2","this","magnitude","sqrt","pow","ElectricBackground","lightningBolts","lastManualBoltTime","Date","now","createLightning","startX","startY","segmentHeight","bolt","segments","thickness","opacity","initSegments","start","minWidth","maxWidth","offset","boltLength","segment","points","endY","endX","min","max","nextStart","updateBolt","forEach","drawBolt","closePath","drawSegment","filter","currentTime","BackgroundSelector","backgrounds","active","onBackgroundSelect","useState","visible","setVisible","stopDefaultClick","preventDefault","toggleVisible","icon","faArrowDown","faArrowUp","onChange","target","value","onBlur","map","background","BackgroundChoices","electric","Background","backgroundNames","Object","keys","chooseRandomBackground","setBackground","newBackground","Footer","PageContent","Home","About","href","App","basename","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d33487d4.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.scss';\n\nconst Navbar: React.FC = (props) => {\n    return (\n        <nav className='header-nav'>\n            <ul>\n                {props.children}\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport { Link } from \"react-router-dom\"\n\ntype NavItemProps = {\n    link: string,\n    text: string,\n}\n\nconst NavItem: React.VFC<NavItemProps> = (props: NavItemProps) => {\n    const { link, text } = props;\n\n    const onLinkClicked = (e: React.MouseEvent) => {\n        // Prevent the background canvas from reacting to clicking on link.\n        e.stopPropagation();\n    }\n\n    return (\n        <li className=\"header-nav__item\">\n            <Link to={link} onClick={onLinkClicked}>\n                {text}\n            </Link>\n        </li>\n    )\n}\n\nexport default NavItem;","import React from 'react';\nimport Navbar from './Navbar';\nimport NavItem from './NavItem';\nimport './index.scss';\n\nconst Header: React.VFC = () => {\n    return (\n        <header className='page-header'>\n            <Navbar>\n                <NavItem link='/' text='Home' />\n                <NavItem link='/about' text='About' />\n                <NavItem link='/' text='Projects' />\n                <NavItem link='/' text='Contact' />\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header;","import { useRef, useEffect } from 'react';\n\nexport interface EventListeners {\n    onResize?: (context: CanvasRenderingContext2D) => void,\n    onClick?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n    onMouseMove?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n}\n\nconst useCanvas = (draw: (context: CanvasRenderingContext2D, frameCount: number) => void, listeners: EventListeners) => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const canvasCtxRef = useRef<CanvasRenderingContext2D | null>(null);\n    const { onResize, onClick, onMouseMove } = listeners;\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\n            let ctx = canvasCtxRef.current;\n            let frameCount = 0;\n            let animationFrameId: number;\n\n            const render = () => {\n                if (ctx) {\n                    frameCount++;\n                    draw(ctx, frameCount);\n                }\n                animationFrameId = window.requestAnimationFrame(render);\n            };\n\n            render();\n\n            return () => {\n                window.cancelAnimationFrame(animationFrameId);\n            };\n        }\n    }, [draw]);\n\n    useEffect(() => {\n        if (canvasCtxRef.current) {\n            let handlers: any = {};\n\n            let ctx = canvasCtxRef.current;\n\n            if (onResize) {\n                handlers['resize'] = () => {\n                    onResize(ctx);\n                }\n            }\n\n            if (onClick) {\n                handlers['click'] = (e: MouseEvent) => {\n                    onClick(ctx, e);\n                }\n            }\n            \n            if (onMouseMove) {\n                handlers['mousemove'] = (e: MouseEvent) => {\n                    onMouseMove(ctx, e);\n                }\n            }\n\n            for (const eventName in handlers) {\n                window.addEventListener(eventName, handlers[eventName]);\n            }\n        \n            return () => {\n                for (const eventName in handlers) {\n                    window.removeEventListener(eventName, handlers[eventName]);\n                }\n            };\n        }\n    });\n\n    return canvasRef;\n}\n\nexport default useCanvas;","import React from \"react\";\nimport useCanvas from '../../hooks/useCanvas';\n\ntype CanvasProps = {\n    draw: (context: CanvasRenderingContext2D, frameCount: number) => void,\n    onResize?: (context: CanvasRenderingContext2D) => void,\n    onClick?: (context: CanvasRenderingContext2D, event: MouseEvent) => void,\n    onMouseMove?: (context: CanvasRenderingContext2D, event: MouseEvent) => void\n}\n\nconst Canvas: React.FC<CanvasProps> = (props: CanvasProps) => {\n    const { draw, ...rest } = props;   \n    const canvasRef = useCanvas(draw, rest);\n\n    return <canvas ref={canvasRef} />\n}\n\nexport default Canvas;","export const getRandBetween = (lower: number, upper: number) => {\n    return Math.random() * (upper - lower) + lower;\n}\n\nexport const getRandIntBetween = (lower: number, upper: number) => {\n    return Math.floor(Math.random() * (upper - lower) + lower);\n}\n\nexport const getRandSign = () => {\n    return Math.random() > 0.5 ? -1 : 1;\n}","import React from \"react\";\nimport Canvas from '../../Canvas';\nimport { getRandBetween, getRandSign } from '../../../utils/Random';\n\nconst BACKGROUND_COLOR = '#000000';\n\ntype Spiral = {\n    centerX: number,\n    centerY: number,\n    colorAngle: number,\n    iter: number,\n    maxIter: number,\n    increasing: boolean,\n    multiplier: number,\n}\n\nconst SpiralBackground: React.VFC = () => {\n    let spirals: Spiral[] = [];\n\n\n    const drawSpiral = (context: CanvasRenderingContext2D, spiral: Spiral) => {\n        const { centerX, centerY, iter, multiplier, colorAngle } = spiral;\n        const finalColorAngle = (colorAngle + multiplier * getRandBetween(0.5,2)) % 360;\n        spiral.colorAngle = finalColorAngle;\n\n        context.moveTo(centerX, centerY);\n        context.lineWidth = 10;\n        context.strokeStyle = `hsl(${finalColorAngle}, 30%, 15%)`;\n        context.shadowBlur = 10;\n        context.shadowColor= `hsl(${(finalColorAngle + getRandBetween(-2,2)) % 360}, 30%, 15%)`;\n        context.beginPath();\n\n        let radius = 0;\n        let angle = 0;\n\n        for (let n = 0; n < iter; n++) {\n            radius += 0.05;\n            angle += (multiplier) * (Math.PI * 2) / 400;\n            const x = centerX + radius * Math.cos(angle);\n            const y = centerY + radius * Math.sin(angle);\n            context.lineTo(x, y);\n        }\n\n        context.stroke();\n    }\n\n    const updateSpirals = () => {\n        const newSpirals = [];\n        for (const spiral of spirals) {\n            if (spiral.iter) {\n                newSpirals.push(spiral);\n            }\n            spiral.increasing = spiral.increasing && spiral.iter < spiral.maxIter;\n            if (spiral.increasing) {\n                spiral.iter++;\n            }\n            else {\n                spiral.iter--;\n            }\n        }\n\n        spirals = newSpirals;\n    }\n\n    const initSpiral = (width: number, height: number) => {\n        return {\n            centerX: getRandBetween(10, width - 10),\n            centerY: getRandBetween(10, height - 10), \n            colorAngle: getRandBetween(0, 360),\n            iter: 1,\n            maxIter: getRandBetween(1000, 4000),\n            increasing: true,\n            multiplier: getRandSign()\n        };\n    }\n\n    const handleSpiralCount = (width: number, height: number) => {\n        const spiralCount = spirals.length;\n        const defaultSpiralCount = getDefaultSpiralCount(width, height);\n        for (let i = spiralCount; i < defaultSpiralCount; i++) {\n            spirals.push(initSpiral(width, height));\n        }\n    }\n    \n    const drawCanvas = (context: CanvasRenderingContext2D, frameCount: number) => {\n        const canvas = context.canvas;\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.fillStyle = BACKGROUND_COLOR;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        handleSpiralCount(canvas.width, canvas.height);\n\n        updateSpirals();\n        for (const spiral of spirals) {\n            drawSpiral(context, spiral);\n        }\n    }\n\n    const handleClick = (context: CanvasRenderingContext2D, e: MouseEvent) => {\n        const rect = context.canvas.getBoundingClientRect();\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        spirals.push({ \n            centerX: x,\n            centerY: y,\n            colorAngle: getRandBetween(0, 360),\n            iter: 1, \n            maxIter: getRandBetween(1000, 4000),\n            increasing: true,\n            multiplier: getRandSign()\n            }\n        );\n    }\n\n    const getDefaultSpiralCount = (width: number, height: number) => {\n        const area = width * height;\n\n        return Math.ceil(area / 200000 + 1);\n    }\n\n    return (\n        <Canvas draw={drawCanvas} onClick={handleClick}/>\n    );\n}\n\nexport default SpiralBackground;","import React from 'react';\nimport Canvas from '../../Canvas';\nimport { getRandBetween, getRandSign } from '../../../utils/Random';\n\nconst BACKGROUND_COLOR = '#000000';\nconst PARTICLE_COLORS = [\n    '#8E5E52',\n    '#8E7F52',\n    '#868E52',\n    '#5D8959',\n    '#598984',\n    '#686E8C',\n    '#927D8F'\n];\n\ntype Particle  = {\n    color: string,\n    x: number,\n    y: number,\n    vx: number,\n    vy: number\n}\n\nconst ParticleBackground: React.VFC = () => {\n    const particles: Particle[] = [];\n\n    const createParticle =  (width: number, height: number): Particle => {\n        return {\n            color: getRandomColor(),\n            x: getRandBetween(0, width),\n            y: getRandBetween(0, height),\n            vx: getRandSign() * getRandomVelocity(),\n            vy: getRandSign() * getRandomVelocity()\n        } as Particle;\n    }\n\n    const initAllParticles = (width: number, height: number) => {\n        const totalParticles = getNumParticles(width, height);\n        for (let i = 0; i < totalParticles; i++) {\n            particles.push(createParticle(width, height));\n        }\n    }\n\n    const updateParticle = (particle: Particle, width: number, height: number) => {\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        if (particle.x >= width || particle.x <= 0) {\n            particle.vx = -Math.sign(particle.vx) * getRandomVelocity();\n        }\n\n        if (particle.y >= height || particle.y <= 0) {\n            particle.vy = - Math.sign(particle.vy) * getRandomVelocity();\n        }\n    }\n\n    const drawParticle = (context: CanvasRenderingContext2D, particle: Particle) => {\n        const { color, x, y } = particle;\n        context.beginPath();\n        context.shadowBlur = 10;\n        context.shadowColor = color;\n        context.arc(x, y, 5, 0, 2 * Math.PI);\n        context.fillStyle = color;\n        context.fill();\n        context.strokeStyle = color;\n        context.stroke();\n\n    }\n\n    const drawCanvas = (context: CanvasRenderingContext2D, _: number) => {\n        const canvas = context.canvas;\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        \n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.fillStyle = BACKGROUND_COLOR;\n        context.globalCompositeOperation = 'screen';\n        context.fillRect(0, 0, canvas.width, canvas.height);\n    \n        if (!particles.length) {\n            initAllParticles(canvas.width, canvas.height);\n        }\n\n        for (const particle of particles) {\n            updateParticle(particle, canvas.width, canvas.height);\n            drawParticle(context, particle);\n        }\n    }\n\n    const handleResize = (context: CanvasRenderingContext2D) => {\n        const { width, height } = context.canvas;\n        const totalParticles = getNumParticles(width, height);\n        const currentParticles = particles.length;\n        if (currentParticles > totalParticles) {\n            for (let i = currentParticles; i > totalParticles; i--) {\n                particles.pop();\n            }\n        }\n        else {\n            for (let i = currentParticles; i < totalParticles; i++) {\n                particles.push(createParticle(width, height));\n            }\n        }\n    }\n\n    const getRandomVelocity = (): number => {\n        return getRandBetween(0.5, 1.5);\n    }\n\n    const getRandomColor = (): string => {\n        return PARTICLE_COLORS[Math.floor(Math.random() * PARTICLE_COLORS.length)];\n    }\n\n    const getNumParticles = (canvasWidth: number, canvasHeight: number) => {\n        const area = canvasWidth * canvasHeight;\n\n        return Math.ceil(area / 2000);\n    }\n\n    return (\n        <Canvas draw={drawCanvas} onResize={handleResize}/>\n    );\n}\n\nexport default ParticleBackground;","export class Vec2 {\n    public x: number;\n    public y: number;\n\n    constructor(x: number = 0, y: number = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    add({x, y}: Vec2) {\n        this.x += x;\n        this.y += y;\n    }\n\n    getDisplacement({x, y}: Vec2): Vec2 {\n        return new Vec2(x - this.x, y - this.y);\n    }\n\n    normalize() {\n        const magnitude = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n        if (magnitude) {\n            this.x /= magnitude;\n            this.y /= magnitude;\n        }\n    }\n}","import React from 'react';\nimport Canvas from '../../Canvas';\nimport { Vec2 } from '../../../utils/Math';\nimport { getRandBetween } from '../../../utils/Random';\n\ntype LightningSegment = {\n    points: Vec2[];\n}\n\ntype LightningBolt = {\n    segments: LightningSegment[],\n    thickness: number,\n    opacity: number,\n}\n\nconst BACKGROUND_COLOR = '#000000';\nconst NUM_SEGMENTS = 100;\n\nconst ElectricBackground: React.VFC = () => {\n    let lightningBolts: LightningBolt[] = [];\n    let lastManualBoltTime = Date.now();\n\n    const createLightning = (canvas: HTMLCanvasElement, startX?: number, startY?: number): LightningBolt => {\n        const { width, height } = canvas;\n        const segmentHeight = height/NUM_SEGMENTS;\n        const bolt: LightningBolt = {\n            segments: [],\n            thickness: 5,\n            opacity: 1\n        };\n        startX = startX || getRandBetween(2, width - 2);\n        startY = startY || 0;\n        initSegments(bolt, new Vec2(startX, startY), 2, width - 2, getRandBetween(-2, 2), segmentHeight, height);\n\n        return bolt;\n    }\n\n    const initSegments = (bolt: LightningBolt, start: Vec2, minWidth: number, maxWidth: number, offset: number, boltLength: number, height: number) => {\n        const segment: LightningSegment = {points: [start]};\n        let startX = start.x;\n        let startY = start.y;\n        while (startY < height) {\n            if (segment.points.length && Math.random() < 0.01) {\n                break;\n            }\n            const endY = startY + boltLength;\n            const endX = Math.min(Math.max(startX + getRandBetween(-10 + offset, 10 + offset), minWidth), maxWidth);\n            segment.points.push(new Vec2(endX, endY));\n            startX = endX;\n            startY = endY;\n        }\n\n        bolt.segments.push(segment);\n        if (startY < height) {\n            const nextStart = new Vec2(startX, startY);\n            initSegments(bolt, nextStart, minWidth, startX + 2, -2, Math.max(boltLength - 1, 3), height);\n            initSegments(bolt, nextStart, startX - 2, maxWidth, 2, Math.max(boltLength - 1, 3), height);\n        }\n    }\n    \n    const updateBolt = (bolt: LightningBolt) => {\n        bolt.opacity -= 0.01;\n        bolt.thickness -= 0.05;\n        if (bolt.thickness <= 2) {\n            bolt.segments.forEach(segment => segment.points[segment.points.length - 1].y -= 0.05);\n        }\n    }\n\n    const updateAllBolts = () => {\n        lightningBolts.forEach(updateBolt);\n        lightningBolts = lightningBolts.filter(bolt => bolt.opacity > 0 && bolt.thickness > 0);\n    }\n\n    const drawSegment = (context: CanvasRenderingContext2D, segment: LightningSegment, thickness: number, opacity: number) => {\n        const { points } = segment;\n        const [ start, ...rest ] = points;\n        context.beginPath();\n\n        context.moveTo(start.x, start.y);\n        context.lineWidth = thickness;\n        context.strokeStyle = `rgba(255, 255, 255, ${opacity})`;\n        context.shadowBlur = 30;\n        context.shadowColor = \"#bd9df2\";\n        for (const {x, y} of rest) {\n            context.lineTo(x, y);\n        }\n\n        context.stroke();\n        context.closePath();\n    }\n\n    const drawBolt = (context: CanvasRenderingContext2D, bolt: LightningBolt) => {\n        const { segments, thickness, opacity } = bolt;\n        segments.forEach(segment => drawSegment(context, segment, thickness, opacity));\n    }\n\n    const drawCanvas = (context: CanvasRenderingContext2D, frameCount: number) => {\n        const canvas = context.canvas;\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        \n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.fillStyle = BACKGROUND_COLOR;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        if (frameCount % 200 === 0) {\n            lightningBolts.push(createLightning(canvas));\n        }\n        updateAllBolts();\n        lightningBolts.forEach(bolt => drawBolt(context, bolt));\n    }\n\n    const handleClick = (context: CanvasRenderingContext2D, e: MouseEvent) => {\n        const rect = context.canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        lastManualBoltTime = Date.now();\n        lightningBolts.push(createLightning(context.canvas, x, y));\n    }\n\n    const handleMouseMove = (context: CanvasRenderingContext2D, e: MouseEvent) => {\n        const currentTime = Date.now();\n        if (currentTime - lastManualBoltTime > 500) {\n            const rect = context.canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            lastManualBoltTime = currentTime;\n            lightningBolts.push(createLightning(context.canvas, x, y));\n        }\n    }\n\n    return (\n        <Canvas draw={drawCanvas} onClick={handleClick} onMouseMove={handleMouseMove} />\n    )\n}\n\nexport default ElectricBackground;","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport './index.scss';\n\ntype BackgroundSelectorProps = {\n    backgrounds: string[],\n    active: string,\n    onBackgroundSelect: (background: string) => void,\n}\n\nconst BackgroundSelector: React.VFC<BackgroundSelectorProps> = (props: BackgroundSelectorProps) => {\n    const { backgrounds, active, onBackgroundSelect } = props;\n    const [ visible, setVisible ] = useState(false);\n\n    const onVisibleClicked = (e: React.MouseEvent<HTMLButtonElement>) => {\n        stopDefaultClick(e);\n        toggleVisible();\n    }\n\n    const stopDefaultClick = (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        onBackgroundSelect(e.target.value);\n    }\n\n    const toggleVisible = () => {\n        setVisible(!visible);\n    }\n\n    return (\n        <div className='background-selector'>\n            <button className='background-selector__visible-button' onClick={onVisibleClicked}>\n                <span>Background: </span><FontAwesomeIcon icon={visible ?  faArrowDown : faArrowUp }/>\n            </button>\n            { visible &&\n                <div className='background-selector__options-container'>\n                    <select className='background-selector__options' onChange={onChange} value={active} onClick={stopDefaultClick} onBlur={toggleVisible}>\n                         {backgrounds.map((background) =>\n                             <option key={background} className={active ? 'background-active-option' : '' }value={background} onClick={stopDefaultClick}>\n                                 {background}\n                             </option>\n                         )};\n                    </select>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default BackgroundSelector;","import React, { Fragment, useState } from 'react';\nimport SpiralBackground from './SpiralBackground';\nimport ParticleBackground from './ParticleBackground';\nimport ElectricBackground from './ElectricBackground';\nimport BackgroundSelector from './BackgroundSelector';\nimport './index.scss';\n\n\nconst BackgroundChoices: {[key: string]: React.ReactNode}  = {\n    spiral: < SpiralBackground />,\n    particle: < ParticleBackground />,\n    electric: < ElectricBackground />\n};\n\nconst Background: React.VFC = () => {\n    const chooseRandomBackground = () : string => {\n        const backgroundNames = Object.keys(BackgroundChoices);\n        const index = Math.floor(Math.random() * backgroundNames.length);\n        return backgroundNames[index];\n    }\n\n    const [background, setBackground] = useState(chooseRandomBackground());\n\n    const onBackgroundSelected = (newBackground: string) => {\n        setBackground(newBackground);\n    }\n\n    return (\n        <Fragment>\n            <div className='background'>\n                { BackgroundChoices[background] }\n            </div>\n                <BackgroundSelector\n                    backgrounds={Object.keys(BackgroundChoices)}\n                    onBackgroundSelect={onBackgroundSelected}\n                    active={background} />\n        </Fragment>\n    )\n}\n\nexport default Background;","import React from 'react';\nimport './index.scss';\n\nconst Footer: React.VFC = () => {\n    return (\n        <footer className='page-footer'>\n\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './index.scss';\n\nconst PageContent: React.FC = (props) => {\n    return (\n        <div className='page-content'>\n            { props.children }\n        </div>\n    )\n}\n\nexport default PageContent;","import React from 'react';\nimport PageContent from '../../components/PageContent';\nimport './index.scss';\n\nconst Home: React.VFC = () => {\n    return (\n        <div className='home-page'>\n            <PageContent>\n                <div className='home-page__wrapper'>\n                    <h1 className='home-page__header'>\n                        <span className='home-page__header__text'>Andrew Matsumoto</span>\n                    </h1>\n                    <h2 className='home-page__subheader'>\n                        <span className='home-page__subheader__text'>Passionate About Developing Smart, Customer-Oriented Solutions.</span>\n                    </h2>\n                </div>\n            </PageContent>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport PageContent from '../../components/PageContent';\nimport './index.scss';\n\nconst About : React.VFC = () => {\n    return (\n        <div className='about-page'>\n            <PageContent>\n                <h1 className = 'about-page__header'>About Me</h1>\n                <p>I am a Full-Stack Software Engineer at <a href=\"https://www.rlicorp.com/\">RLI Insurance</a>, building websites \n                    for our customers and underwriters. I graduated  in 2018 from Cornell University with a Masters of Engineering\n                    in Computer Science. I also graduated from Cornell University in 2017 with a Bachelors of Science in Computer Science.\n                    I enjoy learning new things and being constantly challenged.\n                </p>\n            </PageContent>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport Header from './components/Header';\nimport Background from './components/Background';\nimport Footer from './components/Footer';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport { Route, Routes, HashRouter as Router } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router basename='/'>\n      <Background />\n      <Header />\n      <Routes>\n        <Route path='/' element={<Home />} />\n        <Route path='/about' element = {<About />} />\n      </Routes>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}