{"version":3,"sources":["components/Header/Navbar.tsx","components/Header/NavItem.tsx","components/Header/index.tsx","hooks/useCanvas.ts","components/Layout/Canvas.tsx","components/Background/index.tsx","components/Layout/PageLayout.tsx","pages/Home/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","props","className","children","NavItem","link","text","href","Header","useCanvas","draw","canvasRef","useRef","canvasCtxRef","useEffect","current","getContext","animationFrameId","ctx","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","Canvas","ref","Background","particles","createParticle","width","height","color","Math","random","x","y","vx","getRandomDirection","getRandomVelocity","vy","updateParticle","particle","sign","drawParticle","context","beginPath","arc","PI","fillStyle","fill","strokeStyle","stroke","canvas","offsetWidth","offsetHeight","clearRect","fillRect","length","i","push","initAllParticles","PageLayout","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3f7ae48.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.scss';\n\nconst Navbar: React.FC = (props) => {\n    return (\n        <nav className='header-nav'>\n            <ul>\n                {props.children}\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\n\ntype NavItemProps = {\n    link: string,\n    text: string,\n}\n\nconst NavItem: React.VFC<NavItemProps> = (props: NavItemProps) => {\n    const { link, text } = props;\n\n    return (\n        <li className=\"header-nav__item\">\n            <a href={link}>\n                {text}\n            </a>\n        </li>\n    )\n}\n\nexport default NavItem;","import React from 'react';\nimport Navbar from './Navbar';\nimport NavItem from './NavItem';\nimport './index.scss';\n\nconst Header: React.VFC = () => {\n    return (\n        <header className='page-header'>\n            <Navbar>\n                <NavItem link='#' text='Home' />\n                <NavItem link='#' text='About' />\n                <NavItem link='#' text='Projects' />\n                <NavItem link='#' text='Contact' />\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header;","import { useRef, useEffect } from 'react';\n\nconst useCanvas = (draw: (context: CanvasRenderingContext2D, frameCount: number) => void) => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const canvasCtxRef = useRef<CanvasRenderingContext2D | null>(null);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\n            let ctx = canvasCtxRef.current;\n            let frameCount = 0;\n            let animationFrameId: number;\n\n            const render = () => {\n                if (ctx) {\n                    frameCount++;\n                    draw(ctx, frameCount);\n                }\n                animationFrameId = window.requestAnimationFrame(render);\n            };\n\n            render();\n\n            return () => {\n                window.cancelAnimationFrame(animationFrameId);\n            };\n        }\n    }, [draw]);\n\n    return canvasRef;\n}\n\nexport default useCanvas;","import React from \"react\";\nimport useCanvas from '../../hooks/useCanvas';\n\ntype CanvasProps = {\n    draw: (context: CanvasRenderingContext2D, frameCount: number) => void;\n}\n\nconst Canvas: React.FC<CanvasProps> = (props: CanvasProps) => {\n    const { draw } = props;   \n    const canvasRef = useCanvas(draw);\n\n    return <canvas ref={canvasRef} />\n}\n\nexport default Canvas;","import React from 'react';\nimport Canvas from '../Layout/Canvas';\nimport './index.scss';\n\nconst BACKGROUND_COLOR = '#2E5175';\nconst PARTICLE_COLOR1 = '#DACF77';\nconst PARTICLE_COLOR2 = '#6DB495';\n\ntype Particle  = {\n    color: string,\n    x: number,\n    y: number,\n    vx: number,\n    vy: number\n}\n\nconst Background: React.FC = (props) => {\n    const particles: Particle[] = [];\n\n    const createParticle =  (width: number, height: number): Particle => {\n        return {\n            color: (Math.random() > 0.5 ? PARTICLE_COLOR1 : PARTICLE_COLOR2),\n            x: Math.random() * width,\n            y: Math.random() * height,\n            vx: getRandomDirection() * getRandomVelocity(),\n            vy: getRandomDirection() * getRandomVelocity()\n        } as Particle;\n    }\n\n    const initAllParticles = (width: number, height: number) => {\n        for (let i = 0; i < 100; i++) {\n            particles.push(createParticle(width, height));\n        }\n    }\n\n    const updateParticle = (particle: Particle, width: number, height: number) => {\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        if (particle.x >= width || particle.x <= 0) {\n            particle.vx = -Math.sign(particle.vx) * getRandomVelocity();\n        }\n\n        if (particle.y >= height || particle.y <= 0) {\n            particle.vy = - Math.sign(particle.vy) * getRandomVelocity();\n        }\n    }\n\n    const drawParticle = (context: CanvasRenderingContext2D, particle: Particle) => {\n        const { color, x, y } = particle;\n        context.beginPath();\n        context.arc(x, y, 5, 0, 2 * Math.PI);\n        context.fillStyle = color;\n        context.fill();\n        context.strokeStyle = color;\n        context.stroke();\n\n    }\n\n    const drawCanvas = (context: CanvasRenderingContext2D, frameCount: number) => {\n        const canvas = context.canvas;\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.fillStyle = BACKGROUND_COLOR;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n    \n        if (!particles.length) {\n            initAllParticles(canvas.width, canvas.height);\n        }\n\n        for (const particle of particles) {\n            updateParticle(particle, canvas.width, canvas.height);\n            drawParticle(context, particle);\n        }\n    }\n\n    const getRandomVelocity = (): number => {\n        return (Math.random() * 0.5 + 0.5);\n    }\n\n    const getRandomDirection = (): number => {\n        return (Math.random() > 0.5 ? 1 : -1);\n    }\n\n    return (\n        <div className='background'>\n            <Canvas draw={drawCanvas} />\n        </div>\n    )\n}\n\nexport default Background;","import React, { Fragment } from 'react';\nimport Background from '../Background';\n\nconst PageLayout: React.FC = (props) => {\n    return (\n        <Fragment>\n            <Background />\n            { props.children }\n        </Fragment>\n    )\n}\n\nexport default PageLayout;","import React from 'react';\nimport Header from '../../components/Header';\nimport PageLayout from '../../components/Layout/PageLayout';\nimport './index.scss';\n\nconst Home: React.VFC = () => {\n    return (\n        <div className='home-page'>\n            <PageLayout>\n                <Header />\n            </PageLayout>\n        </div>\n    )\n}\n\nexport default Home;","import './App.css';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}